// Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
//  вычисление N-го числа в ряду Фибоначчи 
//  вычисление всех чисел в ряду Фибоначчи до числа N
//  вычисление N-го просто числа
//  вычисление всех простых чисел до числа N



const MathX = (() => {
  function fibonacci(n) {
    // Указываем первые два числа в списке чисел фибоначчи
    let a = 1;
    let b = 1;
    // Запускаем цикл, начиная с третьего числа в последовательности и продолжая до n. На каждой итерации цикла мы будем вычислять следующее число в последовательности.
    for (let i = 3; i <= n; i++) {
      // На каждой итерации вычисляется новое число c, которое является суммой предыдущих двух чисел a и b. Это число будет следующим числом в последовательности.
      let c = a + b;
      // Переменные a и b обновляются для следующей итерации цикла. a получает значение предыдущего b, а b получает значение c, что позволяет перейти к следующему числу в последовательности.
      a = b;
      b = c;
    }
    // Функция возвращает b, которое представляет собой n-ое число в последовательности Фибоначчи.
    return b;
  }

  function fibonacciSequence(n) {
    // Если это первое число фибоначчи, то сообщаем об этом
    if(n === 1) return "Это первое число фибоначчи";
    // Создаем пустой массив под все числа фибоначчи до n-го числа
    const sequence = [];
    // Запускаем цикл, который вычсиляет все числа фибоначчи от 1 до n-1
    for (let i=1; i < n; i++){
      // Добавляет число n-ое число фибоначчи в массив
      sequence.push(fibonacci(i));
    }
    // Возвращаем строку со всеми числами фибоначчи до числа n
    return sequence;
  }

  function isPrime(n) {
    // Если число мненьше 2, то оно не является простым
    if(n < 2) return false;
    // Запускаем цикл, который проверяет делится ли число n без остатка на числа от 2 до n-1
    for(let i=2; i<n; i++){
      // Если число делится без остатка на любое число от 2 до n-1, то оно не является простым и итогом функции возвращаем false
      if(n % i === 0) return false;
    }
    // Если число не делится без остатка на все число от 2 до n-1, то оно является простым и результат функции true
    return true;
  }

  function nthPrime(n) {
    let count = 0;
    let number = 2;
    while (true) {
      if (isPrime(number)) {
        count++;
        if (count === n) {
          return number;
        }
      }
      number++;
    }
  }

  function findPrimesUpToN(n) {
    const primes = [];
    for (let i = 2; i <= n; i++) {
      if (isPrime(i)) {
        primes.push(i);
      }
    }
    return primes;
  }

  return {
    fibonacci,
    fibonacciSequence,
    nthPrime,
    findPrimesUpToN
  }
})();

console.log(MathX.fibonacci(2));
console.log(MathX.fibonacciSequence(2));
console.log(MathX.nthPrime(2));
console.log(MathX.findPrimesUpToN(2));